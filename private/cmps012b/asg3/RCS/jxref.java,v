head	1.88;
access;
symbols;
locks;
comment	@# @;


1.88
date	2014.05.21.05.31.35;	author -;	state -;
branches;
next	1.87;

1.87
date	2014.05.13.00.42.02;	author -;	state -;
branches;
next	1.86;

1.86
date	2014.05.12.23.11.06;	author -;	state -;
branches;
next	1.85;

1.85
date	2014.05.12.23.10.06;	author -;	state -;
branches;
next	1.84;

1.84
date	2014.05.12.23.09.04;	author -;	state -;
branches;
next	1.83;

1.83
date	2014.05.12.23.08.41;	author -;	state -;
branches;
next	1.82;

1.82
date	2014.05.12.22.57.23;	author -;	state -;
branches;
next	1.81;

1.81
date	2014.05.12.22.53.36;	author -;	state -;
branches;
next	1.80;

1.80
date	2014.05.12.22.46.12;	author -;	state -;
branches;
next	1.79;

1.79
date	2014.05.12.22.45.53;	author -;	state -;
branches;
next	1.78;

1.78
date	2014.05.12.22.29.09;	author -;	state -;
branches;
next	1.77;

1.77
date	2014.05.12.22.19.54;	author -;	state -;
branches;
next	1.76;

1.76
date	2014.05.12.22.19.09;	author -;	state -;
branches;
next	1.75;

1.75
date	2014.05.12.22.18.33;	author -;	state -;
branches;
next	1.74;

1.74
date	2014.05.12.22.08.31;	author -;	state -;
branches;
next	1.73;

1.73
date	2014.05.12.22.04.06;	author -;	state -;
branches;
next	1.72;

1.72
date	2014.05.12.22.02.29;	author -;	state -;
branches;
next	1.71;

1.71
date	2014.05.12.22.02.10;	author -;	state -;
branches;
next	1.70;

1.70
date	2014.05.12.22.01.42;	author -;	state -;
branches;
next	1.69;

1.69
date	2014.05.12.20.04.45;	author -;	state -;
branches;
next	1.68;

1.68
date	2014.05.12.19.59.57;	author -;	state -;
branches;
next	1.67;

1.67
date	2014.05.12.19.39.18;	author -;	state -;
branches;
next	1.66;

1.66
date	2014.05.12.03.01.51;	author -;	state -;
branches;
next	1.65;

1.65
date	2014.05.12.03.00.38;	author -;	state -;
branches;
next	1.64;

1.64
date	2014.05.12.02.57.45;	author -;	state -;
branches;
next	1.63;

1.63
date	2014.05.12.02.57.07;	author -;	state -;
branches;
next	1.62;

1.62
date	2014.05.12.02.56.16;	author -;	state -;
branches;
next	1.61;

1.61
date	2014.05.12.02.55.39;	author -;	state -;
branches;
next	1.60;

1.60
date	2014.05.09.23.40.27;	author -;	state -;
branches;
next	1.59;

1.59
date	2014.05.09.23.38.54;	author -;	state -;
branches;
next	1.58;

1.58
date	2014.05.09.23.37.26;	author -;	state -;
branches;
next	1.57;

1.57
date	2014.05.09.23.36.56;	author -;	state -;
branches;
next	1.56;

1.56
date	2014.05.09.23.35.48;	author -;	state -;
branches;
next	1.55;

1.55
date	2014.05.09.23.23.44;	author -;	state -;
branches;
next	1.54;

1.54
date	2014.05.09.23.23.21;	author -;	state -;
branches;
next	1.53;

1.53
date	2014.05.09.23.22.03;	author -;	state -;
branches;
next	1.52;

1.52
date	2014.05.09.23.21.34;	author -;	state -;
branches;
next	1.51;

1.51
date	2014.05.09.23.21.18;	author -;	state -;
branches;
next	1.50;

1.50
date	2014.05.09.23.20.39;	author -;	state -;
branches;
next	1.49;

1.49
date	2014.05.09.23.20.09;	author -;	state -;
branches;
next	1.48;

1.48
date	2014.05.09.23.19.22;	author -;	state -;
branches;
next	1.47;

1.47
date	2014.05.09.23.18.14;	author -;	state -;
branches;
next	1.46;

1.46
date	2014.05.09.22.42.42;	author -;	state -;
branches;
next	1.45;

1.45
date	2014.05.09.22.42.07;	author -;	state -;
branches;
next	1.44;

1.44
date	2014.05.09.22.40.46;	author -;	state -;
branches;
next	1.43;

1.43
date	2014.05.09.22.39.59;	author -;	state -;
branches;
next	1.42;

1.42
date	2014.05.09.22.39.04;	author -;	state -;
branches;
next	1.41;

1.41
date	2014.05.09.22.31.13;	author -;	state -;
branches;
next	1.40;

1.40
date	2014.05.09.22.30.30;	author -;	state -;
branches;
next	1.39;

1.39
date	2014.05.09.22.29.27;	author -;	state -;
branches;
next	1.38;

1.38
date	2014.05.09.22.28.31;	author -;	state -;
branches;
next	1.37;

1.37
date	2014.05.09.22.28.03;	author -;	state -;
branches;
next	1.36;

1.36
date	2014.05.09.22.23.40;	author -;	state -;
branches;
next	1.35;

1.35
date	2014.05.09.22.22.40;	author -;	state -;
branches;
next	1.34;

1.34
date	2014.05.09.22.22.06;	author -;	state -;
branches;
next	1.33;

1.33
date	2014.05.09.22.21.48;	author -;	state -;
branches;
next	1.32;

1.32
date	2014.05.09.22.20.32;	author -;	state -;
branches;
next	1.31;

1.31
date	2014.05.09.22.20.08;	author -;	state -;
branches;
next	1.30;

1.30
date	2014.05.09.22.19.44;	author -;	state -;
branches;
next	1.29;

1.29
date	2014.05.09.22.05.43;	author -;	state -;
branches;
next	1.28;

1.28
date	2014.05.09.22.05.18;	author -;	state -;
branches;
next	1.27;

1.27
date	2014.05.09.22.01.14;	author -;	state -;
branches;
next	1.26;

1.26
date	2014.05.09.22.00.28;	author -;	state -;
branches;
next	1.25;

1.25
date	2014.05.09.22.00.12;	author -;	state -;
branches;
next	1.24;

1.24
date	2014.05.09.21.59.32;	author -;	state -;
branches;
next	1.23;

1.23
date	2014.05.09.02.05.46;	author -;	state -;
branches;
next	1.22;

1.22
date	2014.05.09.02.05.11;	author -;	state -;
branches;
next	1.21;

1.21
date	2014.05.09.02.04.39;	author -;	state -;
branches;
next	1.20;

1.20
date	2014.05.09.02.04.09;	author -;	state -;
branches;
next	1.19;

1.19
date	2014.05.09.02.01.24;	author -;	state -;
branches;
next	1.18;

1.18
date	2014.05.09.02.00.50;	author -;	state -;
branches;
next	1.17;

1.17
date	2014.05.09.02.00.36;	author -;	state -;
branches;
next	1.16;

1.16
date	2014.05.09.01.59.59;	author -;	state -;
branches;
next	1.15;

1.15
date	2014.05.09.01.57.08;	author -;	state -;
branches;
next	1.14;

1.14
date	2014.05.09.01.56.06;	author -;	state -;
branches;
next	1.13;

1.13
date	2014.05.09.01.55.38;	author -;	state -;
branches;
next	1.12;

1.12
date	2014.05.09.00.48.45;	author -;	state -;
branches;
next	1.11;

1.11
date	2014.05.09.00.48.21;	author -;	state -;
branches;
next	1.10;

1.10
date	2014.05.09.00.44.20;	author -;	state -;
branches;
next	1.9;

1.9
date	2014.05.09.00.18.42;	author -;	state -;
branches;
next	1.8;

1.8
date	2014.05.09.00.17.38;	author -;	state -;
branches;
next	1.7;

1.7
date	2014.05.09.00.16.52;	author -;	state -;
branches;
next	1.6;

1.6
date	2014.05.09.00.16.14;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.05.09.00.14.09;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.05.09.00.07.07;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.05.09.00.06.42;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.05.09.00.06.08;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.05.08.23.31.41;	author -;	state -;
branches;
next	;


desc
@@


1.88
log
@-
@
text
@// $Id: jxref.java,v 1.87 2014-05-12 17:42:02-07 - - $
// Usman Zahid
// uzahid
import java.io.*;
import java.util.Scanner;
import static java.lang.System.*;

class jxref {

   static final String STDIN_NAME = "-";
   static boolean treedump = false;
   static boolean caseignore = false;

   private static void printborder() {
      int i = 0;
      for(; i <72; ++i){
         out.printf(":");
   }
   }

   private static void printname(String filename) {
      out.printf("%n");
      printborder();
      out.printf("%n");
      out.printf("%s%n", filename);
      printborder();
      out.printf("%n");
      out.printf("%n");
  }

   static class printer implements visitor <String, queue <Integer>> {
      public void visit (String key, queue <Integer> value) {
         out.printf ("%s", key);
         for (int linenr: value) out.printf (" %d", linenr);
         out.printf ("%n");
      }
   }

   //Determines the command line arguments filename or command

   static boolean commandline(String arg) {
      if (arg.charAt(0) == '-' && arg.length() >1)
         return true;
      else
         return false;
   }

   static void xref_file (String filename, Scanner scan) {
      
      printname(filename);
        
      treemap <String, queue <Integer>> map =
            new treemap <String, queue <Integer>> ();

      for (int linenr = 1; scan.hasNextLine (); ++linenr) {
         for (String word: scan.nextLine().split ("\\W+")) {
            if (word.matches ("^\\d*$")) continue;
            if (caseignore == true) word = word.toLowerCase();
       //       debug text
       //       out.printf ("%s %d%n", word, linenr);
            queue<Integer> tqueue;
            tqueue = map.get(word);
            if (tqueue==null){
               queue<Integer> newqueue = new queue<Integer>();
               newqueue.insert(linenr);
               map.put(word, newqueue);
           } else{
               tqueue.insert(linenr);
         }
        }
      }
       // boolean checks
      if (treedump==true){
         map.debug_dump();
     }else {
      visitor <String, queue <Integer>> print_fn = new printer ();
      map.do_visit (print_fn);
   }
 }
   public static void main (String[] args) {
     //boolean check for args[0]
     if ((args.length != 0) && commandline(args[0]))
          bootrigger(args[0]);
      if (args.length == 0) {
         xref_file (STDIN_NAME, new Scanner (in));
      }else if (args.length == 1 && commandline(args[0])){
         xref_file (STDIN_NAME, new Scanner(in));
      }else {                                    
         for (int argi = 0; argi < args.length; ++argi) {
            String filename = args[argi]; 
            if (filename.equals (STDIN_NAME)) {
               xref_file (STDIN_NAME, new Scanner (in)); 
            }else {                                     
               try {
                  Scanner scan = new Scanner (new File (filename));
                  xref_file (filename, scan);
                  scan.close ();
               }catch (IOException error) {
                  auxlib.warn (error.getMessage ());
               }
            }
         }
      }
      auxlib.exit (); //exit status of auxlib.java
   }


   static void bootrigger (String argument_zero){
     int i = 1;
     int l = argument_zero.length();
     for(;i<l;++i){
         switch(argument_zero.charAt(i)) {
            case 'd':
               treedump = true;
               break;
            case 'f':
               caseignore = true;
               break;
            default:
               auxlib.warn("invalid command",argument_zero.charAt(i));
               break;
            }
        }
    }
}

@


1.87
log
@-
@
text
@d1 3
a3 2
// $Id: jxref.java,v 1.86 2014-05-12 16:11:06-07 - - $

@


1.86
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.85 2014-05-12 16:10:06-07 - - $
d98 1
a98 1
                //  auxlib.warn (error.getMessage ());
@


1.85
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.84 2014-05-12 16:09:04-07 - - $
d98 1
a98 1
                  auxlib.warn (error.getMessage ());
@


1.84
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.83 2014-05-12 16:08:41-07 - - $
d90 3
a92 3
            if (filename.equals (STDIN_NAME)) {//if "-" is present then
               xref_file (STDIN_NAME, new Scanner (in)); //pass the string
            }else {                                     //into method x_ref
@


1.83
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.82 2014-05-12 15:57:23-07 - - $
d10 2
a11 2
   boolean treedump = false;
   boolean caseignore = false;
@


1.82
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.81 2014-05-12 15:53:36-07 - - $
d10 2
a11 2
   static boolean treedump = false;
   static boolean caseignore = false;
@


1.81
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.80 2014-05-12 15:46:12-07 - - $
d27 1
@


1.80
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.79 2014-05-12 15:45:53-07 - - $
d59 8
d68 1
a69 1
      
@


1.79
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.78 2014-05-12 15:29:09-07 - - $
d107 1
a107 1
               caseignore = true'
@


1.78
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.77 2014-05-12 15:19:54-07 - - $
a104 1
               System.out.println("flag d is working");
d107 1
a107 2
               caseignore = true;
               System.out.println("flag f is working");
@


1.77
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.76 2014-05-12 15:19:09-07 - - $
d31 1
a31 1
         out.printf ("%s%n", key);
@


1.76
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.75 2014-05-12 15:18:33-07 - - $
d23 1
@


1.75
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.74 2014-05-12 15:08:31-07 - - $
a16 1
      out.printf("%n");
@


1.74
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.73 2014-05-12 15:04:06-07 - - $
d17 1
a17 1
         out.printf("%n");
@


1.73
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.72 2014-05-12 15:02:29-07 - - $
d72 1
a72 1
     if ((args.length != 0) && commandline(args[0])){
d76 3
a78 1
      }else {                                     
d118 1
@


1.72
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.71 2014-05-12 15:02:10-07 - - $
d96 1
a96 1
public static void bootrigger (String arg_zero){
d98 1
a98 1
     int l = arg_zero.length();
d100 1
a100 1
         switch(arg_zero.charAt(i)) {
d110 1
a110 1
               auxlib.warn("invalid command",arg_zero.charAt(i));
@


1.71
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.70 2014-05-12 15:01:42-07 - - $
d72 1
a72 1
     if ((args.length != 0) && commandline(args[0]i)){
@


1.70
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.69 2014-05-12 13:04:45-07 - - $
d72 1
a72 1
     if ((args.length != 0) && commandline(args[0]){
@


1.69
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.68 2014-05-12 12:59:57-07 - - $
d57 2
a58 1
  /* */         out.printf ("%s %d%n", word, linenr);
d61 5
d69 1
a69 1

d71 3
d96 1
a96 1
public static void bootrigger (String argument_zero){
d98 1
a98 1
     int l = argument_zero.length();
d100 1
a100 1
         switch(argument_zero.charAt(i)) {
d110 1
a110 1
               auxlib.warn("invalid command",argument_zero.charAt(i));
@


1.68
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.67 2014-05-12 12:39:18-07 - - $
d47 3
d52 1
d56 1
@


1.67
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.66 2014-05-11 20:01:51-07 - - $
d21 8
d36 10
@


1.66
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.65 2014-05-11 20:00:38-07 - - $
d13 7
a19 2
//   private staic void 

d68 1
a68 1
         switch(args_zero.charAt(i)) {
@


1.65
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.64 2014-05-11 19:57:45-07 - - $
d63 1
a63 1
         switch("STDIN_NAME") {
@


1.64
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.63 2014-05-11 19:57:07-07 - - $
d61 3
a63 2
     for(;i<argument_zero.length();++i){
         switch(argument_zero.charAt(i)) {
@


1.63
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.62 2014-05-11 19:56:16-07 - - $
d63 1
a63 1
            case "d":
d67 1
a67 1
            case "f":
@


1.62
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.61 2014-05-11 19:55:39-07 - - $
d23 1
a23 1
   static void xref_file (String filename, Scanner scan, boolean caseignore) {
d72 1
a72 1
               auxlib.warn("invalid command",ars_zero.charAt(i));
@


1.61
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.60 2014-05-09 16:40:27-07 - - $
d13 1
a13 1
   private staic void 
@


1.60
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.59 2014-05-09 16:38:54-07 - - $
d8 1
d10 6
a15 1
 
d18 1
a18 1
         out.printf ("%s %s", key, value);
a36 3
      boolean treedump=false;
      boolean caseignore=false;
    //  bootrigger(caseignore,treedump);
d38 4
a41 4
         xref_file (STDIN_NAME, new Scanner (in), caseignore);//if no cl args present
      }else {                                     //redirect to stdin, else
         for (int argi = 0; argi < args.length; ++argi) {//for argi, indexed
            String filename = args[argi]; //cl args named filename
d43 1
a43 1
               xref_file (STDIN_NAME, new Scanner (in), caseignore); //pass the string
d47 1
a47 1
                  xref_file (filename, scan, caseignore);
d59 4
a62 3
public static void bootrigger (boolean treedump, boolean caseignore){
     for(;;){
         switch("STDIN_NAME") {
d72 1
@


1.59
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.58 2014-05-09 16:37:26-07 - - $
d33 1
a33 1
      bootrigger(caseignore,treedump);
@


1.58
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.57 2014-05-09 16:36:56-07 - - $
a17 2
     // boolean treedump=false;
     // bootrigger(caseignore, treedump);
a23 3
            //if (caseignore==true){
             //  word.toLowerCase(); 
           // }
@


1.57
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.56 2014-05-09 16:35:48-07 - - $
d28 1
a28 1
            }
@


1.56
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.55 2014-05-09 16:23:44-07 - - $
d26 2
a27 2
            if (caseignore==true){
               word.toLowerCase(); 
@


1.55
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.54 2014-05-09 16:23:21-07 - - $
d18 2
a19 2
      boolean treedump=false;
      bootrigger(caseignore, treedump);
@


1.54
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.53 2014-05-09 16:22:03-07 - - $
d18 1
a18 1
      boolean treedump;
@


1.53
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.52 2014-05-09 16:21:34-07 - - $
d18 2
a19 1
      bootrigger(caseignore, caseignore);
@


1.52
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.51 2014-05-09 16:21:18-07 - - $
d18 1
a18 1
      bootrigger(caseignore);
@


1.51
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.50 2014-05-09 16:20:39-07 - - $
d18 1
a18 1
      bootrigger(caseignore,);
@


1.50
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.49 2014-05-09 16:20:09-07 - - $
d18 1
a18 1
      bootrigger(caseignore,treedump);
@


1.49
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.48 2014-05-09 16:19:22-07 - - $
d18 1
a18 1
      bootrigger(caseignore);
d37 1
a37 1
      bootrigger(caseignore);
@


1.48
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.47 2014-05-09 16:18:14-07 - - $
d18 1
a18 1
      bootrigger();
d37 1
a37 1
      bootrigger();
@


1.47
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.46 2014-05-09 15:42:42-07 - - $
d18 1
d37 1
@


1.46
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.45 2014-05-09 15:42:07-07 - - $
d24 1
a24 1
            if (caseignore){
@


1.45
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.44 2014-05-09 15:40:46-07 - - $
d63 1
a63 1
               println("flag d is working");
d67 1
a67 1
               println("flag f is working");
@


1.44
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.43 2014-05-09 15:39:59-07 - - $
d63 1
d67 1
@


1.43
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.42 2014-05-09 15:39:04-07 - - $
d34 2
a35 2
      boolean treedump;
      boolean caseignore;
@


1.42
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.41 2014-05-09 15:31:13-07 - - $
d17 1
a17 2
   static void xref_file (String filename, Scanner scan, boolean caseignore,
 boolean treedump) {
d37 1
a37 1
         xref_file (STDIN_NAME, new Scanner (in), caseignore, treedump);//if no cl args present
d42 1
a42 2
               xref_file (STDIN_NAME, new Scanner (in), caseignore,
                                                      treedump); //pass the string
d46 1
a46 1
                  xref_file (filename, scan, caseignore, treedump);
@


1.41
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.40 2014-05-09 15:30:30-07 - - $
d25 1
a25 1
            if (bootrigger.caseignore){
d48 1
a48 1
                  xref_file (filename, scan);
@


1.40
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.39 2014-05-09 15:29:27-07 - - $
d43 2
a44 1
               xref_file (STDIN_NAME, new Scanner (in)); //pass the string
@


1.39
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.38 2014-05-09 15:28:31-07 - - $
d17 2
a18 1
   static void xref_file (String filename, Scanner scan, boolean caseignore) {
@


1.38
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.37 2014-05-09 15:28:03-07 - - $
d37 1
a37 1
         xref_file (STDIN_NAME, new Scanner (in));//if no cl args present
@


1.37
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.36 2014-05-09 15:23:40-07 - - $
d24 1
a24 1
            if (caseignore){
@


1.36
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.35 2014-05-09 15:22:40-07 - - $
d24 3
d34 2
a35 2
     // boolean treedump;
   //   boolean caseignore;
@


1.35
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.34 2014-05-09 15:22:06-07 - - $
d17 1
a17 1
   static void xref_file (String filename, Scanner scan) {
d31 2
a32 2
      boolean treedump;
      boolean caseignore;
@


1.34
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.33 2014-05-09 15:21:48-07 - - $
a55 4
     if (args[0]== STDIN_NAME){
     Scanner scan = new Scanner (new File (filename));
     String filename = ars[argi];
     if (filename.equals (STDIN_NAME)){
a68 2
} 
}
@


1.33
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.32 2014-05-09 15:20:32-07 - - $
d75 1
@


1.32
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.31 2014-05-09 15:20:08-07 - - $
d56 3
a58 3
 //    if (args[0]== STDIN_NAME){
//     String filename = args[argi];
  //   Scanner scan = new Scanner (new File (filename));
@


1.31
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.30 2014-05-09 15:19:44-07 - - $
d57 2
a58 2
     String filename = args[argi];
     Scanner scan = new Scanner (new File (filename));
@


1.30
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.29 2014-05-09 15:05:43-07 - - $
a74 1
}
@


1.29
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.28 2014-05-09 15:05:18-07 - - $
d56 1
a56 1
     if (args[0]== STDIN_NAME){
@


1.28
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.27 2014-05-09 15:01:14-07 - - $
d75 1
@


1.27
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.26 2014-05-09 15:00:28-07 - - $
d56 5
a60 2
//   if (args[0]== STDIN_NAME){
      for(;;){
d71 1
a71 1
  //       }
@


1.26
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.25 2014-05-09 15:00:12-07 - - $
d56 1
a56 1
   if (args[0]== STDIN_NAME){
d68 1
a68 1
         }
@


1.25
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.24 2014-05-09 14:59:32-07 - - $
d55 1
a55 1
public static void bootrigger (boolean treedump, boolean caseignore, Scanner scan){
@


1.24
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.23 2014-05-08 19:05:46-07 - - $
d55 1
a55 1
public static void bootrigger (boolean treedump, boolean caseignore){
@


1.23
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.22 2014-05-08 19:05:11-07 - - $
d59 1
a59 1
            case d:
d62 1
a62 1
            case f:
@


1.22
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.21 2014-05-08 19:04:39-07 - - $
d55 1
a55 1
public static bootrigger (boolean treedump, boolean caseignore){
@


1.21
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.20 2014-05-08 19:04:09-07 - - $
d55 1
a55 1
public static booleantrigger (boolean treedump, boolean caseignore){
@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.19 2014-05-08 19:01:24-07 - - $
d54 1
a54 1
}
@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.18 2014-05-08 19:00:50-07 - - $
d71 1
a71 1

@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.17 2014-05-08 19:00:36-07 - - $
a54 1
public class booleantrigger{
d71 1
a71 1
}
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.16 2014-05-08 18:59:59-07 - - $
d66 1
a66 1
            default;
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.15 2014-05-08 18:57:08-07 - - $
d55 2
a56 1
public static class booleantrigger (boolean treedump, boolean caseignore){
d72 1
a72 10
q
q
q
q
q
q
q
q
q

@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.14 2014-05-08 18:56:06-07 - - $
d55 1
a55 1
public static booleantrigger (boolean treedump, boolean caseignore){
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.13 2014-05-08 18:55:38-07 - - $
d58 1
a58 1
         switch("STDIN_NAME" {
d71 9
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.12 2014-05-08 17:48:45-07 - - $
d55 1
a55 1
public static void booleantrigger (boolean treedump, boolean caseignore){
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.11 2014-05-08 17:48:21-07 - - $
d31 2
d55 16
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.10 2014-05-08 17:44:20-07 - - $
a16 12
boolean treedump;
boolean caseignore;
   for (;;){
      switch("-"){
         case d:
            treedump = true;
            break;
         case f:
            caseignore = true;
            break;
         default;
            auxlib.die();
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.9 2014-05-08 17:18:42-07 - - $
a5 3
boolean treedump = false;
boolean caseignore = false; 

d9 1
a9 10
   for (;;){
      switch(STDIN_NAME){
         case d:
             treedump= true;
             break;
         case f:
             stringcase = true;
             break;
         default;
             auxlib.java(); 
d17 12
a28 1

@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.8 2014-05-08 17:17:38-07 - - $
d6 3
d12 10
a21 1

@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.7 2014-05-08 17:16:52-07 - - $
d24 1
a24 1
            out.printf ("%s %d%n", linenr, word);
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.6 2014-05-08 17:16:14-07 - - $
d24 1
a24 1
            out.printf ("%s %d", filename, linenr, word);
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.5 2014-05-08 17:14:09-07 - - $
d24 1
a24 1
            out.printf ("%s%n", filename, linenr, word);
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.4 2014-05-08 17:07:07-07 - - $
d24 1
a24 1
            out.printf ("%s: %d: %s%n", filename, linenr, word);
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.3 2014-05-08 17:06:42-07 - - $
d24 1
a24 1
       //     out.printf ("%s: %d: %s%n", filename, linenr, word);
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.2 2014-05-08 17:06:08-07 - - $
d23 1
a23 1
       //     if (word.matches ("^\\d*$")) continue;
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.1 2014-05-08 16:31:41-07 - - $
d24 1
a24 1
            out.printf ("%s: %d: %s%n", filename, linenr, word);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.1 2014-01-16 17:44:47-08 - - $
d23 1
a23 1
            if (word.matches ("^\\d*$")) continue;
d33 7
a39 7
         xref_file (STDIN_NAME, new Scanner (in));
      }else {
         for (int argi = 0; argi < args.length; ++argi) {
            String filename = args[argi];
            if (filename.equals (STDIN_NAME)) {
               xref_file (STDIN_NAME, new Scanner (in));
            }else {
d50 1
a50 1
      auxlib.exit ();
@
