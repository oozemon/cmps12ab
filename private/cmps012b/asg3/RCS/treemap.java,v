head	1.13;
access;
symbols;
locks;
comment	@# @;


1.13
date	2014.05.12.22.31.18;	author -;	state -;
branches;
next	1.12;

1.12
date	2014.05.12.22.30.34;	author -;	state -;
branches;
next	1.11;

1.11
date	2014.05.12.22.21.39;	author -;	state -;
branches;
next	1.10;

1.10
date	2014.05.12.22.15.53;	author -;	state -;
branches;
next	1.9;

1.9
date	2014.05.12.21.54.35;	author -;	state -;
branches;
next	1.8;

1.8
date	2014.05.12.21.52.11;	author -;	state -;
branches;
next	1.7;

1.7
date	2014.05.12.21.50.59;	author -;	state -;
branches;
next	1.6;

1.6
date	2014.05.12.21.48.47;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.05.12.21.28.16;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.05.12.21.28.04;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.05.12.21.17.54;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.05.12.21.17.30;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.05.12.21.04.13;	author -;	state -;
branches;
next	;


desc
@@


1.13
log
@-
@
text
@// $Id: treemap.java,v 1.12 2014-05-12 15:30:34-07 - - $

import static java.lang.System.*;

class treemap <key_t extends Comparable <key_t>, value_t> {

   private class node {
      key_t key;
      value_t value;
      node left;
      node right;
      node(key_t newkey, value_t newvalue) {
         key = newkey;
         value = newvalue;
         left= null;
         right = null;
    }
   }
   private node root;

   //Prints the depth of the binary tree

   private void print_debugger(int height, key_t key, value_t value){
      for (int i = 0; i < height; ++i)
         out.printf("  ");
      out.printf("%d %s %s%n", height, key, value);
   }
//Helper function that performs a binary search, to be implemented in 
//the function get. returns value_t and null otherwise
   private value_t get_rec (node tree, key_t key){
      
      if (tree==null) return null;
      if(key.compareTo(tree.key) <0){
        //get from left tree
        return get_rec(tree.left, key);
     }else if (key.compareTo(tree.key) > 0){
        //get from right tree
        return get_rec(tree.right, key);
     }else{
        //key was found
        return tree.value;
     }
 } 
   //fcn for put that performs a binary serach for valid entry points
   private node put_rec(node tree, key_t key, value_t value){
      if (tree ==null) {
         tree = new node(key,value);
     }else if( key.compareTo(tree.key) < 0){
         tree.left = put_rec(tree.left, key, value);
     }else if (key.compareTo(tree.key) >0){
         tree.right = put_rec(tree.right, key, value);
     }else{
         tree.value = value;
     }
     return tree;
   }

   //Preforms the inorder traversal of the binary tree
   private void debug_dump_rec (node tree, int height) {
      if( tree.left !=null) debug_dump_rec(tree.left, height+1);

      print_debugger(height, tree.key, tree.value);

      if (tree.right !=null) debug_dump_rec(tree.right, height+1);
   }

   private void do_visit_rec (visitor <key_t, value_t> visit_fn,
                              node tree) {
      if(tree == null) return;
      do_visit_rec(visit_fn, tree.left);
      visit_fn.visit(tree.key, tree.value);
      do_visit_rec(visit_fn, tree.right);
   
   }

   public value_t get (key_t key) {
      value_t = result;

      result = get_rec (root, key);
      return result;
   }

   //if there is one found, swap old and new value and return old value
   //if there is not one, create a new node as a leaf, and insert the 
   //key value and return null

   public value_t put (key_t key, value_t value) {
      
      Object result;
      result = get_rec (root,key);
      root= put_rec(root,key,value);
      return result;
   }

   public void debug_dump () {
      debug_dump_rec (root, 0);
   }

   public void do_visit (visitor <key_t, value_t> visit_fn) {
      do_visit_rec (visit_fn, root);
   }

}
   
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.11 2014-05-12 15:21:39-07 - - $
d89 1
a89 1
      Object value_t result;
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.10 2014-05-12 15:15:53-07 - - $
d89 1
a89 1
      value_t result;
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.9 2014-05-12 14:54:35-07 - - $
d76 1
a76 1
/*   public value_t get (key_t key) {
d82 1
a82 1
*/
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.8 2014-05-12 14:52:11-07 - - $
d76 1
a76 1
   public value_t get (key_t key) {
d78 1
d82 1
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.7 2014-05-12 14:50:59-07 - - $
d87 1
a87 1
      value_t result=new value();
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.6 2014-05-12 14:48:47-07 - - $
d86 2
a87 1
      value_t result;
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.5 2014-05-12 14:28:16-07 - - $
d86 1
a86 1
      value result;
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.4 2014-05-12 14:28:04-07 - - $
d86 1
a86 1
      value_t result;
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.3 2014-05-12 14:17:54-07 - - $
d53 1
a53 1
         tree.value = value
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.2 2014-05-12 14:17:30-07 - - $
d12 6
d44 13
a56 1

d59 1
a59 1
   private void debug_dump_rec (node tree, int depth) {
d101 1
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.1 2014-05-12 14:04:13-07 - - $
d60 1
a60 1
      result = get_rec (root, key)
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.1 2014-01-16 17:44:47-08 - - $
d22 16
d51 5
a55 1
      throw new UnsupportedOperationException ();
d59 3
a61 1
      throw new UnsupportedOperationException ();
d64 1
a64 1
   //if there is one, create a new node as a leaf, and insert the 
a69 1

@
